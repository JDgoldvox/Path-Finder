//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/PlayerUI.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerUI: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerUI()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerUI"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""bb6cfad7-302c-4b60-9bba-6f5ed471c980"",
            ""actions"": [
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""233cc84f-f0e4-47e4-aeb8-af4c5c280407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Step"",
                    ""type"": ""Button"",
                    ""id"": ""40c62afe-2003-4c37-a5b7-d78a6d2127c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeClickCommand"",
                    ""type"": ""Button"",
                    ""id"": ""0423c924-24d6-4fb3-a5df-500a1d52940b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c63c043b-1829-4aae-8c81-25d1eb5f1aeb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""957a6cb3-3de5-49e4-aeda-de27072f4523"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Step"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32348470-f454-49cc-9884-69322ee8dd88"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeClickCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Place = m_UI.FindAction("Place", throwIfNotFound: true);
        m_UI_Step = m_UI.FindAction("Step", throwIfNotFound: true);
        m_UI_ChangeClickCommand = m_UI.FindAction("ChangeClickCommand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Place;
    private readonly InputAction m_UI_Step;
    private readonly InputAction m_UI_ChangeClickCommand;
    public struct UIActions
    {
        private @PlayerUI m_Wrapper;
        public UIActions(@PlayerUI wrapper) { m_Wrapper = wrapper; }
        public InputAction @Place => m_Wrapper.m_UI_Place;
        public InputAction @Step => m_Wrapper.m_UI_Step;
        public InputAction @ChangeClickCommand => m_Wrapper.m_UI_ChangeClickCommand;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Place.started += instance.OnPlace;
            @Place.performed += instance.OnPlace;
            @Place.canceled += instance.OnPlace;
            @Step.started += instance.OnStep;
            @Step.performed += instance.OnStep;
            @Step.canceled += instance.OnStep;
            @ChangeClickCommand.started += instance.OnChangeClickCommand;
            @ChangeClickCommand.performed += instance.OnChangeClickCommand;
            @ChangeClickCommand.canceled += instance.OnChangeClickCommand;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Place.started -= instance.OnPlace;
            @Place.performed -= instance.OnPlace;
            @Place.canceled -= instance.OnPlace;
            @Step.started -= instance.OnStep;
            @Step.performed -= instance.OnStep;
            @Step.canceled -= instance.OnStep;
            @ChangeClickCommand.started -= instance.OnChangeClickCommand;
            @ChangeClickCommand.performed -= instance.OnChangeClickCommand;
            @ChangeClickCommand.canceled -= instance.OnChangeClickCommand;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IUIActions
    {
        void OnPlace(InputAction.CallbackContext context);
        void OnStep(InputAction.CallbackContext context);
        void OnChangeClickCommand(InputAction.CallbackContext context);
    }
}
