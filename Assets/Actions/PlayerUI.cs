//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/PlayerUI.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerUI: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerUI()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerUI"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""bb6cfad7-302c-4b60-9bba-6f5ed471c980"",
            ""actions"": [
                {
                    ""name"": ""PlaceStartLocation"",
                    ""type"": ""Button"",
                    ""id"": ""233cc84f-f0e4-47e4-aeb8-af4c5c280407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlaceEndLocation"",
                    ""type"": ""Button"",
                    ""id"": ""0ee7272d-0c0f-45e7-848a-d5812612fd19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c63c043b-1829-4aae-8c81-25d1eb5f1aeb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceStartLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57de293c-ab24-41bd-8773-a8d99b82cc32"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceEndLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_PlaceStartLocation = m_UI.FindAction("PlaceStartLocation", throwIfNotFound: true);
        m_UI_PlaceEndLocation = m_UI.FindAction("PlaceEndLocation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_PlaceStartLocation;
    private readonly InputAction m_UI_PlaceEndLocation;
    public struct UIActions
    {
        private @PlayerUI m_Wrapper;
        public UIActions(@PlayerUI wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceStartLocation => m_Wrapper.m_UI_PlaceStartLocation;
        public InputAction @PlaceEndLocation => m_Wrapper.m_UI_PlaceEndLocation;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @PlaceStartLocation.started += instance.OnPlaceStartLocation;
            @PlaceStartLocation.performed += instance.OnPlaceStartLocation;
            @PlaceStartLocation.canceled += instance.OnPlaceStartLocation;
            @PlaceEndLocation.started += instance.OnPlaceEndLocation;
            @PlaceEndLocation.performed += instance.OnPlaceEndLocation;
            @PlaceEndLocation.canceled += instance.OnPlaceEndLocation;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @PlaceStartLocation.started -= instance.OnPlaceStartLocation;
            @PlaceStartLocation.performed -= instance.OnPlaceStartLocation;
            @PlaceStartLocation.canceled -= instance.OnPlaceStartLocation;
            @PlaceEndLocation.started -= instance.OnPlaceEndLocation;
            @PlaceEndLocation.performed -= instance.OnPlaceEndLocation;
            @PlaceEndLocation.canceled -= instance.OnPlaceEndLocation;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IUIActions
    {
        void OnPlaceStartLocation(InputAction.CallbackContext context);
        void OnPlaceEndLocation(InputAction.CallbackContext context);
    }
}
